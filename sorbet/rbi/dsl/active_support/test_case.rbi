# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ActiveSupport::TestCase`.
# Please instead update this file by running `bin/tapioca dsl ActiveSupport::TestCase`.

class ActiveSupport::TestCase
  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def artists(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def boxsets(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def card_prices(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def card_types(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def colors(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def keywords(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def magic_card_artists(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def magic_card_color_idents(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def magic_card_colors(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def magic_card_keywords(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def magic_card_rulings(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def magic_card_sub_types(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def magic_card_super_types(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def magic_card_types(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def magic_cards(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def printings(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def rulings(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def sub_types(*fixture_names); end

  sig { params(fixture_names: Symbol).returns(T.untyped) }
  def super_types(*fixture_names); end
end
