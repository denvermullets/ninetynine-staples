# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MagicCard`.
# Please instead update this file by running `bin/tapioca dsl MagicCard`.

class MagicCard
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::MagicCard).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MagicCard).void)
      ).returns(::MagicCard)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MagicCard).void)
      ).returns(::MagicCard)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MagicCard).void)
      ).returns(::MagicCard)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MagicCard).void)
      ).returns(::MagicCard)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MagicCard).void)
      ).returns(::MagicCard)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::MagicCard]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::MagicCard)) }
    def fifth; end

    sig { returns(::MagicCard) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::MagicCard)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::MagicCard) }
    def find_by!(*args); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MagicCard).void)
      ).returns(::MagicCard)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MagicCard).void)
      ).returns(::MagicCard)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MagicCard).void)
      ).returns(::MagicCard)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::MagicCard) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::MagicCard) }
    def first!; end

    sig { returns(T.nilable(::MagicCard)) }
    def forty_two; end

    sig { returns(::MagicCard) }
    def forty_two!; end

    sig { returns(T.nilable(::MagicCard)) }
    def fourth; end

    sig { returns(::MagicCard) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::MagicCard) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::MagicCard).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MagicCard).void)
      ).returns(::MagicCard)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::MagicCard).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::MagicCard).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::MagicCard)) }
    def second; end

    sig { returns(::MagicCard) }
    def second!; end

    sig { returns(T.nilable(::MagicCard)) }
    def second_to_last; end

    sig { returns(::MagicCard) }
    def second_to_last!; end

    sig { returns(::MagicCard) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::MagicCard) }
    def take!; end

    sig { returns(T.nilable(::MagicCard)) }
    def third; end

    sig { returns(::MagicCard) }
    def third!; end

    sig { returns(T.nilable(::MagicCard)) }
    def third_to_last; end

    sig { returns(::MagicCard) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def artist_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def artist_ids=(ids); end

    sig { returns(::Artist::PrivateCollectionProxy) }
    def artists; end

    sig { params(value: T::Enumerable[::Artist]).void }
    def artists=(value); end

    sig { returns(T.nilable(::Boxset)) }
    def boxset; end

    sig { params(value: T.nilable(::Boxset)).void }
    def boxset=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Boxset) }
    def build_boxset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CardPrice) }
    def build_card_price(*args, &blk); end

    sig { returns(T.nilable(::CardPrice)) }
    def card_price; end

    sig { params(value: T.nilable(::CardPrice)).void }
    def card_price=(value); end

    sig { returns(T::Array[T.untyped]) }
    def card_type_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def card_type_ids=(ids); end

    sig { returns(::CardType::PrivateCollectionProxy) }
    def card_types; end

    sig { params(value: T::Enumerable[::CardType]).void }
    def card_types=(value); end

    sig { returns(T::Array[T.untyped]) }
    def color_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def color_ids=(ids); end

    sig { returns(::Color::PrivateCollectionProxy) }
    def colors; end

    sig { params(value: T::Enumerable[::Color]).void }
    def colors=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Boxset) }
    def create_boxset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Boxset) }
    def create_boxset!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CardPrice) }
    def create_card_price(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CardPrice) }
    def create_card_price!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def keyword_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def keyword_ids=(ids); end

    sig { returns(::Keyword::PrivateCollectionProxy) }
    def keywords; end

    sig { params(value: T::Enumerable[::Keyword]).void }
    def keywords=(value); end

    sig { returns(T::Array[T.untyped]) }
    def magic_card_artist_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def magic_card_artist_ids=(ids); end

    sig { returns(::MagicCardArtist::PrivateCollectionProxy) }
    def magic_card_artists; end

    sig { params(value: T::Enumerable[::MagicCardArtist]).void }
    def magic_card_artists=(value); end

    sig { returns(T::Array[T.untyped]) }
    def magic_card_color_ident_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def magic_card_color_ident_ids=(ids); end

    sig { returns(::MagicCardColorIdent::PrivateCollectionProxy) }
    def magic_card_color_idents; end

    sig { params(value: T::Enumerable[::MagicCardColorIdent]).void }
    def magic_card_color_idents=(value); end

    sig { returns(T::Array[T.untyped]) }
    def magic_card_color_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def magic_card_color_ids=(ids); end

    sig { returns(::MagicCardColor::PrivateCollectionProxy) }
    def magic_card_colors; end

    sig { params(value: T::Enumerable[::MagicCardColor]).void }
    def magic_card_colors=(value); end

    sig { returns(T::Array[T.untyped]) }
    def magic_card_keyword_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def magic_card_keyword_ids=(ids); end

    sig { returns(::MagicCardKeyword::PrivateCollectionProxy) }
    def magic_card_keywords; end

    sig { params(value: T::Enumerable[::MagicCardKeyword]).void }
    def magic_card_keywords=(value); end

    sig { returns(T::Array[T.untyped]) }
    def magic_card_ruling_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def magic_card_ruling_ids=(ids); end

    sig { returns(::MagicCardRuling::PrivateCollectionProxy) }
    def magic_card_rulings; end

    sig { params(value: T::Enumerable[::MagicCardRuling]).void }
    def magic_card_rulings=(value); end

    sig { returns(T::Array[T.untyped]) }
    def magic_card_sub_type_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def magic_card_sub_type_ids=(ids); end

    sig { returns(::MagicCardSubType::PrivateCollectionProxy) }
    def magic_card_sub_types; end

    sig { params(value: T::Enumerable[::MagicCardSubType]).void }
    def magic_card_sub_types=(value); end

    sig { returns(T::Array[T.untyped]) }
    def magic_card_super_type_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def magic_card_super_type_ids=(ids); end

    sig { returns(::MagicCardSuperType::PrivateCollectionProxy) }
    def magic_card_super_types; end

    sig { params(value: T::Enumerable[::MagicCardSuperType]).void }
    def magic_card_super_types=(value); end

    sig { returns(T::Array[T.untyped]) }
    def magic_card_type_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def magic_card_type_ids=(ids); end

    sig { returns(::MagicCardType::PrivateCollectionProxy) }
    def magic_card_types; end

    sig { params(value: T::Enumerable[::MagicCardType]).void }
    def magic_card_types=(value); end

    sig { returns(T::Array[T.untyped]) }
    def printing_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def printing_ids=(ids); end

    sig { returns(::Printing::PrivateCollectionProxy) }
    def printings; end

    sig { params(value: T::Enumerable[::Printing]).void }
    def printings=(value); end

    sig { returns(T.nilable(::Boxset)) }
    def reload_boxset; end

    sig { returns(T.nilable(::CardPrice)) }
    def reload_card_price; end

    sig { returns(T::Array[T.untyped]) }
    def ruling_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ruling_ids=(ids); end

    sig { returns(::Ruling::PrivateCollectionProxy) }
    def rulings; end

    sig { params(value: T::Enumerable[::Ruling]).void }
    def rulings=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sub_type_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sub_type_ids=(ids); end

    sig { returns(::SubType::PrivateCollectionProxy) }
    def sub_types; end

    sig { params(value: T::Enumerable[::SubType]).void }
    def sub_types=(value); end

    sig { returns(T::Array[T.untyped]) }
    def super_type_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def super_type_ids=(ids); end

    sig { returns(::SuperType::PrivateCollectionProxy) }
    def super_types; end

    sig { params(value: T::Enumerable[::SuperType]).void }
    def super_types=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def border_color; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def border_color=(value); end

    sig { returns(T::Boolean) }
    def border_color?; end

    sig { returns(T.nilable(::String)) }
    def border_color_before_last_save; end

    sig { returns(T.untyped) }
    def border_color_before_type_cast; end

    sig { returns(T::Boolean) }
    def border_color_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def border_color_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def border_color_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def border_color_changed?; end

    sig { returns(T.nilable(::String)) }
    def border_color_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def border_color_previous_change; end

    sig { returns(T::Boolean) }
    def border_color_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def border_color_previously_was; end

    sig { returns(T.nilable(::String)) }
    def border_color_was; end

    sig { void }
    def border_color_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def boxset_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def boxset_id=(value); end

    sig { returns(T::Boolean) }
    def boxset_id?; end

    sig { returns(T.nilable(::Integer)) }
    def boxset_id_before_last_save; end

    sig { returns(T.untyped) }
    def boxset_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def boxset_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def boxset_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def boxset_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def boxset_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def boxset_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def boxset_id_previous_change; end

    sig { returns(T::Boolean) }
    def boxset_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def boxset_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def boxset_id_was; end

    sig { void }
    def boxset_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def card_number; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def card_number=(value); end

    sig { returns(T::Boolean) }
    def card_number?; end

    sig { returns(T.nilable(::String)) }
    def card_number_before_last_save; end

    sig { returns(T.untyped) }
    def card_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def card_number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_number_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_number_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def card_number_changed?; end

    sig { returns(T.nilable(::String)) }
    def card_number_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_number_previous_change; end

    sig { returns(T::Boolean) }
    def card_number_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def card_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def card_number_was; end

    sig { void }
    def card_number_will_change!; end

    sig { returns(T.nilable(::String)) }
    def card_side; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def card_side=(value); end

    sig { returns(T::Boolean) }
    def card_side?; end

    sig { returns(T.nilable(::String)) }
    def card_side_before_last_save; end

    sig { returns(T.untyped) }
    def card_side_before_type_cast; end

    sig { returns(T::Boolean) }
    def card_side_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_side_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_side_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def card_side_changed?; end

    sig { returns(T.nilable(::String)) }
    def card_side_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_side_previous_change; end

    sig { returns(T::Boolean) }
    def card_side_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def card_side_previously_was; end

    sig { returns(T.nilable(::String)) }
    def card_side_was; end

    sig { void }
    def card_side_will_change!; end

    sig { returns(T.nilable(::String)) }
    def card_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def card_type=(value); end

    sig { returns(T::Boolean) }
    def card_type?; end

    sig { returns(T.nilable(::String)) }
    def card_type_before_last_save; end

    sig { returns(T.untyped) }
    def card_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def card_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def card_type_changed?; end

    sig { returns(T.nilable(::String)) }
    def card_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_type_previous_change; end

    sig { returns(T::Boolean) }
    def card_type_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def card_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def card_type_was; end

    sig { void }
    def card_type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def card_uuid; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def card_uuid=(value); end

    sig { returns(T::Boolean) }
    def card_uuid?; end

    sig { returns(T.nilable(::String)) }
    def card_uuid_before_last_save; end

    sig { returns(T.untyped) }
    def card_uuid_before_type_cast; end

    sig { returns(T::Boolean) }
    def card_uuid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_uuid_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_uuid_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def card_uuid_changed?; end

    sig { returns(T.nilable(::String)) }
    def card_uuid_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def card_uuid_previous_change; end

    sig { returns(T::Boolean) }
    def card_uuid_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def card_uuid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def card_uuid_was; end

    sig { void }
    def card_uuid_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def converted_mana_cost; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def converted_mana_cost=(value); end

    sig { returns(T::Boolean) }
    def converted_mana_cost?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def converted_mana_cost_before_last_save; end

    sig { returns(T.untyped) }
    def converted_mana_cost_before_type_cast; end

    sig { returns(T::Boolean) }
    def converted_mana_cost_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def converted_mana_cost_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def converted_mana_cost_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def converted_mana_cost_changed?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def converted_mana_cost_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def converted_mana_cost_previous_change; end

    sig { returns(T::Boolean) }
    def converted_mana_cost_previously_changed?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def converted_mana_cost_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def converted_mana_cost_was; end

    sig { void }
    def converted_mana_cost_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def edhrec_rank; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def edhrec_rank=(value); end

    sig { returns(T::Boolean) }
    def edhrec_rank?; end

    sig { returns(T.nilable(::Integer)) }
    def edhrec_rank_before_last_save; end

    sig { returns(T.untyped) }
    def edhrec_rank_before_type_cast; end

    sig { returns(T::Boolean) }
    def edhrec_rank_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def edhrec_rank_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def edhrec_rank_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def edhrec_rank_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def edhrec_rank_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def edhrec_rank_previous_change; end

    sig { returns(T::Boolean) }
    def edhrec_rank_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def edhrec_rank_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def edhrec_rank_was; end

    sig { void }
    def edhrec_rank_will_change!; end

    sig { returns(T.nilable(::String)) }
    def face_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def face_name=(value); end

    sig { returns(T::Boolean) }
    def face_name?; end

    sig { returns(T.nilable(::String)) }
    def face_name_before_last_save; end

    sig { returns(T.untyped) }
    def face_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def face_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def face_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def face_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def face_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def face_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def face_name_previous_change; end

    sig { returns(T::Boolean) }
    def face_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def face_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def face_name_was; end

    sig { void }
    def face_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def flavor_text; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def flavor_text=(value); end

    sig { returns(T::Boolean) }
    def flavor_text?; end

    sig { returns(T.nilable(::String)) }
    def flavor_text_before_last_save; end

    sig { returns(T.untyped) }
    def flavor_text_before_type_cast; end

    sig { returns(T::Boolean) }
    def flavor_text_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def flavor_text_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def flavor_text_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def flavor_text_changed?; end

    sig { returns(T.nilable(::String)) }
    def flavor_text_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def flavor_text_previous_change; end

    sig { returns(T::Boolean) }
    def flavor_text_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def flavor_text_previously_was; end

    sig { returns(T.nilable(::String)) }
    def flavor_text_was; end

    sig { void }
    def flavor_text_will_change!; end

    sig { returns(T.nilable(::String)) }
    def frame_version; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def frame_version=(value); end

    sig { returns(T::Boolean) }
    def frame_version?; end

    sig { returns(T.nilable(::String)) }
    def frame_version_before_last_save; end

    sig { returns(T.untyped) }
    def frame_version_before_type_cast; end

    sig { returns(T::Boolean) }
    def frame_version_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def frame_version_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def frame_version_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def frame_version_changed?; end

    sig { returns(T.nilable(::String)) }
    def frame_version_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def frame_version_previous_change; end

    sig { returns(T::Boolean) }
    def frame_version_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def frame_version_previously_was; end

    sig { returns(T.nilable(::String)) }
    def frame_version_was; end

    sig { void }
    def frame_version_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_foil; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_foil=(value); end

    sig { returns(T::Boolean) }
    def has_foil?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_foil_before_last_save; end

    sig { returns(T.untyped) }
    def has_foil_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_foil_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_foil_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_foil_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def has_foil_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_foil_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_foil_previous_change; end

    sig { returns(T::Boolean) }
    def has_foil_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_foil_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_foil_was; end

    sig { void }
    def has_foil_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_non_foil; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_non_foil=(value); end

    sig { returns(T::Boolean) }
    def has_non_foil?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_non_foil_before_last_save; end

    sig { returns(T.untyped) }
    def has_non_foil_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_non_foil_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_non_foil_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_non_foil_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def has_non_foil_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_non_foil_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_non_foil_previous_change; end

    sig { returns(T::Boolean) }
    def has_non_foil_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_non_foil_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_non_foil_was; end

    sig { void }
    def has_non_foil_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.untyped) }
    def identifiers; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def identifiers=(value); end

    sig { returns(T::Boolean) }
    def identifiers?; end

    sig { returns(T.untyped) }
    def identifiers_before_last_save; end

    sig { returns(T.untyped) }
    def identifiers_before_type_cast; end

    sig { returns(T::Boolean) }
    def identifiers_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def identifiers_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def identifiers_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def identifiers_changed?; end

    sig { returns(T.untyped) }
    def identifiers_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def identifiers_previous_change; end

    sig { returns(T::Boolean) }
    def identifiers_previously_changed?; end

    sig { returns(T.untyped) }
    def identifiers_previously_was; end

    sig { returns(T.untyped) }
    def identifiers_was; end

    sig { void }
    def identifiers_will_change!; end

    sig { returns(T.nilable(::String)) }
    def image_large; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def image_large=(value); end

    sig { returns(T::Boolean) }
    def image_large?; end

    sig { returns(T.nilable(::String)) }
    def image_large_before_last_save; end

    sig { returns(T.untyped) }
    def image_large_before_type_cast; end

    sig { returns(T::Boolean) }
    def image_large_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_large_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_large_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def image_large_changed?; end

    sig { returns(T.nilable(::String)) }
    def image_large_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_large_previous_change; end

    sig { returns(T::Boolean) }
    def image_large_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def image_large_previously_was; end

    sig { returns(T.nilable(::String)) }
    def image_large_was; end

    sig { void }
    def image_large_will_change!; end

    sig { returns(T.nilable(::String)) }
    def image_medium; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def image_medium=(value); end

    sig { returns(T::Boolean) }
    def image_medium?; end

    sig { returns(T.nilable(::String)) }
    def image_medium_before_last_save; end

    sig { returns(T.untyped) }
    def image_medium_before_type_cast; end

    sig { returns(T::Boolean) }
    def image_medium_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_medium_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_medium_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def image_medium_changed?; end

    sig { returns(T.nilable(::String)) }
    def image_medium_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_medium_previous_change; end

    sig { returns(T::Boolean) }
    def image_medium_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def image_medium_previously_was; end

    sig { returns(T.nilable(::String)) }
    def image_medium_was; end

    sig { void }
    def image_medium_will_change!; end

    sig { returns(T.nilable(::String)) }
    def image_small; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def image_small=(value); end

    sig { returns(T::Boolean) }
    def image_small?; end

    sig { returns(T.nilable(::String)) }
    def image_small_before_last_save; end

    sig { returns(T.untyped) }
    def image_small_before_type_cast; end

    sig { returns(T::Boolean) }
    def image_small_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_small_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_small_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def image_small_changed?; end

    sig { returns(T.nilable(::String)) }
    def image_small_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_small_previous_change; end

    sig { returns(T::Boolean) }
    def image_small_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def image_small_previously_was; end

    sig { returns(T.nilable(::String)) }
    def image_small_was; end

    sig { void }
    def image_small_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_reprint; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def is_reprint=(value); end

    sig { returns(T::Boolean) }
    def is_reprint?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_reprint_before_last_save; end

    sig { returns(T.untyped) }
    def is_reprint_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_reprint_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def is_reprint_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def is_reprint_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def is_reprint_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_reprint_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def is_reprint_previous_change; end

    sig { returns(T::Boolean) }
    def is_reprint_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_reprint_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_reprint_was; end

    sig { void }
    def is_reprint_will_change!; end

    sig { returns(T.nilable(::String)) }
    def mana_cost; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def mana_cost=(value); end

    sig { returns(T::Boolean) }
    def mana_cost?; end

    sig { returns(T.nilable(::String)) }
    def mana_cost_before_last_save; end

    sig { returns(T.untyped) }
    def mana_cost_before_type_cast; end

    sig { returns(T::Boolean) }
    def mana_cost_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mana_cost_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mana_cost_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def mana_cost_changed?; end

    sig { returns(T.nilable(::String)) }
    def mana_cost_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mana_cost_previous_change; end

    sig { returns(T::Boolean) }
    def mana_cost_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def mana_cost_previously_was; end

    sig { returns(T.nilable(::String)) }
    def mana_cost_was; end

    sig { void }
    def mana_cost_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def mana_value; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def mana_value=(value); end

    sig { returns(T::Boolean) }
    def mana_value?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def mana_value_before_last_save; end

    sig { returns(T.untyped) }
    def mana_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def mana_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def mana_value_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def mana_value_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def mana_value_changed?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def mana_value_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def mana_value_previous_change; end

    sig { returns(T::Boolean) }
    def mana_value_previously_changed?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def mana_value_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def mana_value_was; end

    sig { void }
    def mana_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def original_text; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def original_text=(value); end

    sig { returns(T::Boolean) }
    def original_text?; end

    sig { returns(T.nilable(::String)) }
    def original_text_before_last_save; end

    sig { returns(T.untyped) }
    def original_text_before_type_cast; end

    sig { returns(T::Boolean) }
    def original_text_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_text_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_text_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def original_text_changed?; end

    sig { returns(T.nilable(::String)) }
    def original_text_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_text_previous_change; end

    sig { returns(T::Boolean) }
    def original_text_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def original_text_previously_was; end

    sig { returns(T.nilable(::String)) }
    def original_text_was; end

    sig { void }
    def original_text_will_change!; end

    sig { returns(T.nilable(::String)) }
    def original_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def original_type=(value); end

    sig { returns(T::Boolean) }
    def original_type?; end

    sig { returns(T.nilable(::String)) }
    def original_type_before_last_save; end

    sig { returns(T.untyped) }
    def original_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def original_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def original_type_changed?; end

    sig { returns(T.nilable(::String)) }
    def original_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_type_previous_change; end

    sig { returns(T::Boolean) }
    def original_type_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def original_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def original_type_was; end

    sig { void }
    def original_type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def power; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def power=(value); end

    sig { returns(T::Boolean) }
    def power?; end

    sig { returns(T.nilable(::String)) }
    def power_before_last_save; end

    sig { returns(T.untyped) }
    def power_before_type_cast; end

    sig { returns(T::Boolean) }
    def power_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def power_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def power_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def power_changed?; end

    sig { returns(T.nilable(::String)) }
    def power_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def power_previous_change; end

    sig { returns(T::Boolean) }
    def power_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def power_previously_was; end

    sig { returns(T.nilable(::String)) }
    def power_was; end

    sig { void }
    def power_will_change!; end

    sig { returns(T.nilable(::String)) }
    def rarity; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def rarity=(value); end

    sig { returns(T::Boolean) }
    def rarity?; end

    sig { returns(T.nilable(::String)) }
    def rarity_before_last_save; end

    sig { returns(T.untyped) }
    def rarity_before_type_cast; end

    sig { returns(T::Boolean) }
    def rarity_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def rarity_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def rarity_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def rarity_changed?; end

    sig { returns(T.nilable(::String)) }
    def rarity_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def rarity_previous_change; end

    sig { returns(T::Boolean) }
    def rarity_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def rarity_previously_was; end

    sig { returns(T.nilable(::String)) }
    def rarity_was; end

    sig { void }
    def rarity_will_change!; end

    sig { void }
    def restore_border_color!; end

    sig { void }
    def restore_boxset_id!; end

    sig { void }
    def restore_card_number!; end

    sig { void }
    def restore_card_side!; end

    sig { void }
    def restore_card_type!; end

    sig { void }
    def restore_card_uuid!; end

    sig { void }
    def restore_converted_mana_cost!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_edhrec_rank!; end

    sig { void }
    def restore_face_name!; end

    sig { void }
    def restore_flavor_text!; end

    sig { void }
    def restore_frame_version!; end

    sig { void }
    def restore_has_foil!; end

    sig { void }
    def restore_has_non_foil!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_identifiers!; end

    sig { void }
    def restore_image_large!; end

    sig { void }
    def restore_image_medium!; end

    sig { void }
    def restore_image_small!; end

    sig { void }
    def restore_is_reprint!; end

    sig { void }
    def restore_mana_cost!; end

    sig { void }
    def restore_mana_value!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_original_text!; end

    sig { void }
    def restore_original_type!; end

    sig { void }
    def restore_power!; end

    sig { void }
    def restore_rarity!; end

    sig { void }
    def restore_text!; end

    sig { void }
    def restore_toughness!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_border_color; end

    sig { returns(T::Boolean) }
    def saved_change_to_border_color?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_boxset_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_boxset_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_card_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_card_number?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_card_side; end

    sig { returns(T::Boolean) }
    def saved_change_to_card_side?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_card_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_card_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_card_uuid; end

    sig { returns(T::Boolean) }
    def saved_change_to_card_uuid?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_converted_mana_cost; end

    sig { returns(T::Boolean) }
    def saved_change_to_converted_mana_cost?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_edhrec_rank; end

    sig { returns(T::Boolean) }
    def saved_change_to_edhrec_rank?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_face_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_face_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_flavor_text; end

    sig { returns(T::Boolean) }
    def saved_change_to_flavor_text?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_frame_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_frame_version?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_foil; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_foil?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_non_foil; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_non_foil?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_identifiers; end

    sig { returns(T::Boolean) }
    def saved_change_to_identifiers?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_image_large; end

    sig { returns(T::Boolean) }
    def saved_change_to_image_large?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_image_medium; end

    sig { returns(T::Boolean) }
    def saved_change_to_image_medium?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_image_small; end

    sig { returns(T::Boolean) }
    def saved_change_to_image_small?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_is_reprint; end

    sig { returns(T::Boolean) }
    def saved_change_to_is_reprint?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_mana_cost; end

    sig { returns(T::Boolean) }
    def saved_change_to_mana_cost?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_mana_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_mana_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_original_text; end

    sig { returns(T::Boolean) }
    def saved_change_to_original_text?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_original_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_original_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_power; end

    sig { returns(T::Boolean) }
    def saved_change_to_power?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_rarity; end

    sig { returns(T::Boolean) }
    def saved_change_to_rarity?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_text; end

    sig { returns(T::Boolean) }
    def saved_change_to_text?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_toughness; end

    sig { returns(T::Boolean) }
    def saved_change_to_toughness?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::String)) }
    def text; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def text=(value); end

    sig { returns(T::Boolean) }
    def text?; end

    sig { returns(T.nilable(::String)) }
    def text_before_last_save; end

    sig { returns(T.untyped) }
    def text_before_type_cast; end

    sig { returns(T::Boolean) }
    def text_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def text_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def text_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def text_changed?; end

    sig { returns(T.nilable(::String)) }
    def text_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def text_previous_change; end

    sig { returns(T::Boolean) }
    def text_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def text_previously_was; end

    sig { returns(T.nilable(::String)) }
    def text_was; end

    sig { void }
    def text_will_change!; end

    sig { returns(T.nilable(::String)) }
    def toughness; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def toughness=(value); end

    sig { returns(T::Boolean) }
    def toughness?; end

    sig { returns(T.nilable(::String)) }
    def toughness_before_last_save; end

    sig { returns(T.untyped) }
    def toughness_before_type_cast; end

    sig { returns(T::Boolean) }
    def toughness_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def toughness_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def toughness_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def toughness_changed?; end

    sig { returns(T.nilable(::String)) }
    def toughness_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def toughness_previous_change; end

    sig { returns(T::Boolean) }
    def toughness_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def toughness_previously_was; end

    sig { returns(T.nilable(::String)) }
    def toughness_was; end

    sig { void }
    def toughness_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_border_color?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_boxset_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_card_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_card_side?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_card_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_card_uuid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_converted_mana_cost?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_edhrec_rank?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_face_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_flavor_text?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_frame_version?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_foil?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_non_foil?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_identifiers?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_image_large?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_image_medium?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_image_small?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_is_reprint?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mana_cost?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mana_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_original_text?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_original_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_power?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_rarity?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_text?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_toughness?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::MagicCard } }

    sig { returns(T::Array[::MagicCard]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::MagicCard } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::MagicCard } }

    sig do
      params(
        records: T.any(::MagicCard, T::Enumerable[T.any(::MagicCard, T::Enumerable[::MagicCard])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::MagicCard, T::Enumerable[T.any(::MagicCard, T::Enumerable[::MagicCard])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::MagicCard, T::Enumerable[T.any(::MagicCard, T::Enumerable[::MagicCard])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::MagicCard, Integer, String, T::Enumerable[T.any(::MagicCard, Integer, String, T::Enumerable[::MagicCard])])
      ).returns(T::Array[::MagicCard])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::MagicCard, Integer, String, T::Enumerable[T.any(::MagicCard, Integer, String, T::Enumerable[::MagicCard])])
      ).returns(T::Array[::MagicCard])
    end
    def destroy(*records); end

    sig { returns(T::Array[::MagicCard]) }
    def load_target; end

    sig do
      params(
        records: T.any(::MagicCard, T::Enumerable[T.any(::MagicCard, T::Enumerable[::MagicCard])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::MagicCard, T::Enumerable[T.any(::MagicCard, T::Enumerable[::MagicCard])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::MagicCard, T::Enumerable[T.any(::MagicCard, T::Enumerable[::MagicCard])])
      ).returns(T::Array[::MagicCard])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::MagicCard]) }
    def target; end

    sig { returns(T::Array[::MagicCard]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::MagicCard } }

    sig { returns(T::Array[::MagicCard]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::MagicCard } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
